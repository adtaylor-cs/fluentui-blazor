@using Microsoft.AspNetCore.Components.Rendering
@using Microsoft.FluentUI.AspNetCore.Components.DataGrid.Infrastructure
@namespace Microsoft.FluentUI.AspNetCore.Components
@inherits FluentComponentBase
@typeparam TGridItem
<CascadingValue TValue="InternalGridContext<TGridItem>" IsFixed="true" Value="@_internalGridContext">
    @{
        StartCollectingColumns();
    }
    @if (!_manualGrid)
    {
        @ChildContent
    }
    <Defer>
        @{
            FinishCollectingColumns();
        }
        <ColumnsCollectedNotifier TGridItem="TGridItem" />

        <table @ref=_gridReference
                          id="@Id"
                          no-tabbing=@NoTabbing
                          generate-header="none"
                          grid-template-columns=@_internalGridTemplateColumns
                          class="@GridClass()"
                          style="@Style"
                          aria-rowcount="@(_internalGridContext.TotalItemCount + 1)"
                          @onrowfocus=HandleOnRowFocusAsync
                          @onclosecolumnoptions="CloseColumnOptions"
                          @onclosecolumnresize="CloseColumnResize"
                          @attributes="AdditionalAttributes">
            @if (GenerateHeader != GenerateHeaderOption.None)
            {
                DataGridRowType headerType = DataGridRowType.Header;
                if (GenerateHeader == GenerateHeaderOption.Sticky)
                    headerType = DataGridRowType.StickyHeader;
                <thead>
                    <tr>
                        @_renderColumnHeaders
                    </tr>
                </thead>
               @*  <FluentDataGridRow RowType=@headerType TGridItem=TGridItem>
                    @_renderColumnHeaders
                </FluentDataGridRow> *@
            }
            <tbody>
            @if (Loading)
            {
                @_renderLoadingContent
            }
            else
            {
                @if (Virtualize)
                {
                    if (_internalGridContext.TotalItemCount == 0)
                    {
                        @_renderEmptyContent
                    }
                    else
                    {
                        <Virtualize @ref="@_virtualizeComponent"
                                    TItem="(int RowIndex, TGridItem Data)"
                                    ItemSize="@ItemSize"
                                    OverscanCount="@OverscanCount"
                                    ItemsProvider="@ProvideVirtualizedItemsAsync"
                                    ItemContent="@(item => builder => RenderRow(builder, item.RowIndex, item.Data))"
                                    Placeholder="@(placeholderContext => builder => RenderPlaceholderRow(builder, placeholderContext))" />
                    }
                }
                else
                {
                    @_renderNonVirtualizedRows
                }
            }
            @if (_manualGrid)
            {
                @ChildContent
            }
            </tbody>
        </table>
    </Defer>
</CascadingValue>

@code {
    private void RenderNonVirtualizedRows(RenderTreeBuilder __builder)
    {
        var initialRowIndex = (GenerateHeader != GenerateHeaderOption.None) ? 2 : 1; // aria-rowindex is 1-based, plus 1 if there is a header
        var rowIndex = initialRowIndex;
        if (_internalGridContext.Items.Any())
        {
            Loading = false;
            foreach (var item in _internalGridContext.Items)
            {
                RenderRow(__builder, rowIndex++, item);
            }
        }
        else
        {
            RenderEmptyContent(__builder);
        }
    }

    private void RenderRow(RenderTreeBuilder __builder, int rowIndex, TGridItem item)
    {
        var rowClass = RowClass?.Invoke(item) ?? null;
        var rowStyle = RowStyle?.Invoke(item) ?? null;
        Loading = false;

        <tr @key="@(ItemKey(item))" aria-rowindex="@rowIndex" class="@rowClass" style="@rowStyle" >
            @for (var colIndex = 0; colIndex < _columns.Count; colIndex++)
            {
                var col = _columns[colIndex];

                string? tooltip = col.Tooltip ? @col.RawCellContent(item) : null;

                <td @key="@col" GridColumn=@(colIndex+1) class="@ColumnClass(col)" style="@col.Style" title="@tooltip" aria-label="@tooltip">
                    @((RenderFragment)(__builder => col.CellContent(__builder, item)))
                </td>
            }
        </tr>
    }

    private void RenderPlaceholderRow(RenderTreeBuilder __builder, PlaceholderContext placeholderContext)
    {
        string? _rowsDataSize = $"height: {ItemSize}px";

        <tr aria-rowindex="@(placeholderContext.Index + 1)" style="@_rowsDataSize">
            @for (var colIndex = 0; colIndex < _columns.Count; colIndex++)
            {
                var col = _columns[colIndex];

                <td @key="@col" class="@("grid-cell-placeholder " + @ColumnClass(col))" style="@col.Style">
                    @((RenderFragment)(__builder => col.RenderPlaceholderContent(__builder, placeholderContext)))
                </td>
            }
        </tr>
    }

    private void RenderColumnHeaders(RenderTreeBuilder __builder)
    {
        @for (var colIndex = 0; colIndex < _columns.Count; colIndex++)
        {
            var col = _columns[colIndex];
            var oneBasedIndex = colIndex + 1;
            string CellId = Identifier.NewId();
            if (_sortByColumn == col)
                col.ShowSortIcon = true;
            else
                col.ShowSortIcon = false;

            <th @key="@col"
                class="@("column-header " + @ColumnHeaderClass(col) + (ResizableColumns ? " resizable" : ""))"
                style="@col.Style"
                aria-sort="@AriaSortValue(col)"
                scope="col">
                <div class="col-header-content">
                    @col.HeaderContent
                    @if (col == _displayOptionsForColumn)
                    {
                        <div class="col-options">
                                @col.ColumnOptions
                        </div>
                    }
                    @if (ResizableColumns && col == _displayResizeForColumn)
                    {
                        <div class="col-resize">

                            @if (ResizeType is not null)
                            {
                                <ColumnResizeOptions Column="@oneBasedIndex" ResizeType=@ResizeType TGridItem="TGridItem" />
                            }

                        </div>
                    }

                    @if (ResizableColumns)
                    {
                        <FluentDivider class="col-width-draghandle" Orientation="Orientation.Vertical" Role="DividerRole.Separator" />
                    }
                </div>
            </th>
        }
    }

    private void RenderEmptyContent(RenderTreeBuilder __builder)
    {
        @if (_manualGrid)
        {
            return;
        }
        // If we use the Blazor components here the renderer gets upset/lost, so we use the web components directly
        <tr class="empty-content-row" row-id="empty-row">
            <td class="empty-content-cell">
                @if (EmptyContent is null)
                {
                    @("No data to show!")
                }
                else
                {
                    @EmptyContent
                }
            </td>
        </tr>

    }

    private void RenderLoadingContent(RenderTreeBuilder __builder)
    {
        <tr class="loading-content-row">
            <td class="loading-content-cell">
                @if (LoadingContent is null)
                {
                    <FluentStack HorizontalGap="3">
                        <FluentProgressRing Width="24px" /> <div>Loading...</div>
                    </FluentStack>
                }
                else
                {
                    @LoadingContent
                }
            </td>
        </tr>
    }
}
