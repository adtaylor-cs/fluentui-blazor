@using Microsoft.AspNetCore.Components.Rendering
@using Microsoft.FluentUI.AspNetCore.Components.DataGrid.Infrastructure
@namespace Microsoft.FluentUI.AspNetCore.Components
@typeparam TGridItem
@{
    Grid.AddColumn(this, InitialSortDirection, IsDefaultSortColumn);
}
@code
{
    private void RenderDefaultHeaderContent(RenderTreeBuilder __builder)
    {
        @if (HeaderCellItemTemplate is not null)
        {
            @HeaderCellItemTemplate(this)
        }
        else
        {
            string? tooltip = Tooltip ? Title : null;

            <FluentKeyCode Only="new [] { KeyCode.Ctrl, KeyCode.Enter}" OnKeyDown="HandleKeyDown" class="keycapture" StopPropagation="true" @oncontextmenu="@(() => Grid.RemoveSortByColumnAsync(this))">

                @if (AnyColumnActionEnabled)
                {
                    <FluentButton Disabled="@(!AnyColumnActionEnabled)" Id="@_columnId" Appearance="Appearance.Stealth" class="col-sort-button" @onclick="@HandleColumnHeaderClickedAsync" aria-label="@tooltip" title="@tooltip">
                        <div class="col-title-text" title="@tooltip">@Title</div>

                        @if (Grid.SortByAscending.HasValue && IsActiveSortColumn)
                        {
                            if (Grid.SortByAscending == true)
                            {
                                <FluentIcon Value="@(new CoreIcons.Regular.Size24.ArrowSortUp())" Slot="@(Align == Align.End ? "start" : "end")" Style="opacity: 0.5;" />
                            }
                            else
                            {
                                <FluentIcon Value="@(new CoreIcons.Regular.Size24.ArrowSortDown())" Slot="@(Align == Align.End ? "start" : "end")" Style="opacity: 0.5;" />
                            }
                        }
                        @if (ColumnOptions is not null && Filtered.GetValueOrDefault())
                        {
                            <FluentIcon Value="@(new CoreIcons.Regular.Size24.Filter())" Slot="@(Align == Align.End ? "start" : "end")" Style="opacity: 0.5;" />
                        }
                    </FluentButton>
                    <FluentMenu Anchor="@_columnId" @bind-Open="@_isMenuOpen" HorizontalViewportLock="false" HorizontalPosition="HorizontalPosition.End">
                        @if (Sortable.HasValue ? Sortable.Value : IsSortableByDefault())
                        {
                            <FluentMenuItem OnClick="@(async () => await Grid.SortByColumnAsync(this))" @onkeydown="HandleSortMenuKeyDownAsync">
                                @GetSortOptionText()
                            </FluentMenuItem>
                        }
                        @if (Grid.ResizeType is not null && Grid.ResizableColumns)
                        {
                            <FluentMenuItem OnClick="@(async () => await Grid.ShowColumnResizeAsync(this))" @onkeydown="HandleResizeMenuKeyDownAsync">@Grid.ColumnResizeLabels.ResizeMenu</FluentMenuItem>
                        }
                        @if (ColumnOptions is not null)
                        {
                            <FluentMenuItem OnClick="@(async () => await Grid.ShowColumnOptionsAsync(this))" @onkeydown="HandleOptionsMenuKeyDownAsync">@Grid.ColumnOptionsLabels.OptionsMenu</FluentMenuItem>
                        }
                    </FluentMenu>
                </span>
            </FluentKeyCode>
        }
        else
        {
            string? tooltip = Tooltip ? Title : null;

            @if (Align == Align.Start || Align == Align.Center)
            {
                @if (Grid.ResizeType is not null)
                {
                    <FluentButton Appearance="Appearance.Stealth" class="col-options-button" @onclick="@(() => Grid.ShowColumnOptionsAsync(this))" aria-label="Resize/filter this column">
                        <FluentIcon Value="@(new CoreIcons.Regular.Size24.ChevronDown())" Color="Color.Neutral" Width="20px" Style="opacity: 0.5;" />
                    </FluentButton>
                }
                else
                {
                    <div class="col-title">
                        <div class="col-title-text" title="@tooltip">@Title</div>
                    </div>
                }
                <FluentMenu Anchor="@_columnId" @bind-Open="@_isMenuOpen" HorizontalViewportLock="false" HorizontalPosition="HorizontalPosition.End">
                    @if (Sortable.HasValue ? Sortable.Value : IsSortableByDefault())
                    {
                        <FluentMenuItem OnClick="@(async () => await Grid.SortByColumnAsync(this))" @onkeydown="HandleSortMenuKeyDownAsync">
                            @GetSortOptionText()
                        </FluentMenuItem>
                    }
                    @if (Grid.ResizeType is not null && Grid.ResizableColumns)
                    {
                        <FluentMenuItem OnClick="@(async () => await Grid.ShowColumnResizeAsync(this))" @onkeydown="HandleResizeMenuKeyDownAsync">@Grid.ColumnResizeLabels.ResizeMenu</FluentMenuItem>
                    }
                    @if (ColumnOptions is not null)
                    {
                        <FluentMenuItem OnClick="@(async () => await Grid.ShowColumnOptionsAsync(this))" @onkeydown="HandleOptionsMenuKeyDownAsync">@Grid.ColumnOptionsLabels.OptionsMenu</FluentMenuItem>
                    }
                </FluentMenu>

            </FluentKeyCode>
        }
    }

    internal void RenderPlaceholderContent(RenderTreeBuilder __builder, PlaceholderContext placeholderContext)
    {
        // Blank if no placeholder template was supplied, as it's enough to style with CSS by default
        if (PlaceholderTemplate is not null)
        {
            @PlaceholderTemplate(placeholderContext)
        }
    }
}
